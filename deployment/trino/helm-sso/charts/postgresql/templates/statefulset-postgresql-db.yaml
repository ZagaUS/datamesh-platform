kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.global.PostgresSelector}}
  labels:
    app.kubernetes.io/instance: {{ .Values.service.selector.instance }}
    app.kubernetes.io/name: {{ .Values.global.PostgresSelector}}
    app.kubernetes.io/part-of: {{ .Values.deployment.label.partof }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.service.selector.instance }}
      app.kubernetes.io/name: {{ .Values.global.PostgresSelector}}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Values.service.selector.instance }}
        app.kubernetes.io/name: {{ .Values.global.PostgresSelector}}
    spec:
      containers:
        - resources:
            limits:
              cpu: {{ .Values.deployment.ResourceLimits.cpu}}
              memory: {{ .Values.deployment.ResourceLimits.memory}}
            requests:
              cpu: {{ .Values.deployment.ResourcesRequests.cpu}}
              memory: {{ .Values.deployment.ResourcesRequests.memory}}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.global.PostgresqlPort}}
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          terminationMessagePath: /dev/termination-log
          name: {{ .Values.global.PostgresSelector}}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.global.PostgresqlPort}}
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          env:
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.PostgresSelector}}-secret
                  key: PostgresqlAdminPassword
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.PostgresSelector}}-secret
                  key: PostgresqlUser
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.PostgresSelector}}-secret
                  key: PostgresqlPassword
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.PostgresSelector}}-secret
                  key: PostgresqlDatabase
          ports:
            - name: tcp-postgresql
              containerPort: {{ .Values.global.PostgresqlPort}}
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - name: hive-data
              mountPath: /var/lib/pgsql/data
          terminationMessagePolicy: File
          # image: 'registry.redhat.io/rhel8/postgresql-13:1-101'
          image: {{ .Values.image }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
  volumeClaimTemplates:
    - metadata:
        name: hive-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  updateStrategy:
    type: RollingUpdate