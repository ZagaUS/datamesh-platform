kind: ConfigMap
apiVersion: v1
metadata:
  name: airflow-sso-config
immutable: false
data:
  webserver_config.py: >
    import os

    import logging

    import jwt 

    import requests

    from base64 import b64decode

    from cryptography.hazmat.primitives import serialization

    from flask_appbuilder import expose

    from flask_appbuilder.security.manager import AUTH_OAUTH

    from flask_appbuilder.security.views import AuthOAuthView

    from airflow.www.security import AirflowSecurityManager

    basedir = os.path.abspath(os.path.dirname(__file__))

    log = logging.getLogger(__name__)

    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

    #APP_THEME = "darkly.css" # Flask-WTF flag for CSRF

    WTF_CSRF_ENABLED = True

    # CUSTOMIZATION

    #APP_THEME = "simplex.css"


    AUTH_TYPE = AUTH_OAUTH


    AUTH_USER_REGISTRATION = True  # allow users who are not already in the FAB
    DB


    AUTH_ROLES_SYNC_AT_LOGIN = False


    AUTH_USER_REGISTRATION_ROLE = "Admin"


    PERMANENT_SESSION_LIFETIME = 1800



    API_BASE_URL = os.getenv('API_BASE_URL')


    NAMESPACE = os.getenv('AIRFLOW_NAMESPACE')


    OAUTH_TOKEN_URL = os.getenv('OAUTH_TOKEN_URL')


    OAUTH_AUTHORIZE_URL = os.getenv('OAUTH_AUTHORIZE_URL')


    LOGOUT_REDIRECT_URL= os.getenv('OAUTH_LOGOUT_REDIRECT_URL') 

    OAUTH_USER_INFO = os.getenv('OAUTH_USER_INFO') 

    OAUTH_JWKS_URI = os.getenv('OAUTH_JWKS_URI')


    MY_PROVIDER = 'keycloak'


    CLIENT_ID = os.getenv('CLIENT_ID')


    CLIENT_SECRET = os.getenv('CLIENT_SECRET') 



    AUTH_ROLES_MAPPING = {

        "airflow_Admin": ["Admin"],

        "airflow_Op": ["Op"],

        "airflow_Users": ["User"],

        "airflow_Viewers": ["Viewer"],

        "airflow_Public": ["Public"],

    }

    OAUTH_PROVIDERS = [{
        'name': 'keycloak',
        'icon': 'fa-key',
        'token_key': 'access_token', 
        'remote_app': {
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET,
            'client_kwargs': {
                'scope': 'openid email profile'
            },
            'api_base_url': 'https://keycloak-os-climate.apps.osc-cl4.apps.os-climate.org/realms/KeycloakRealm',
            'access_token_url': OAUTH_TOKEN_URL,
            'authorize_url': OAUTH_AUTHORIZE_URL,
            'jwks_uri': OAUTH_JWKS_URI,
            #'userinfo': OAUTH_USER_INFO,
            "request_token_url": None,
        },
    }]
        
    class CustomAuthRemoteUserView(AuthOAuthView):
        @expose("/logout/")
        def logout(self):
            """Delete access token before logging out."""
            return super().logout()


    class CustomSecurityManager(AirflowSecurityManager):
        authoauthview = CustomAuthRemoteUserView

        def oauth_user_info(self, provider, response):
            if provider == 'keycloak':
                OIDC_ISSUER = 'https://keycloak-os-climate.apps.osc-cl4.apps.os-climate.org/realms/KeycloakRealm'
                req = requests.get(OIDC_ISSUER)
                key_der_base64 = req.json()["public_key"]
                logging.info("token  1 start")
                logging.info(key_der_base64)
                logging.info("token  1 end")
                key_der = b64decode(key_der_base64.encode())
                public_key = serialization.load_der_public_key(key_der)
                logging.info("token  2 start")
                logging.info(key_der_base64)
                logging.info("token  2 end")

                token = response["access_token"]
                self.log.debug(str(token))
                logging.info("token  3 start")
                logging.info(token)
                logging.info("token  3 end")
                #me = jwt.decode(token, public_key, algorithms="RS256", verify=False,audience=CLIENT_ID)
                me = jwt.decode(token, options={"verify_signature": False})
                logging.info("token  4 start")
                logging.info(me)
                logging.info("token  4 end")
                groups = me["realm_access"]["roles"]  # unsafe
                if len(groups) < 1:
                    groups = ["airflow_public"]
                else:
                    groups = [str for str in groups if "airflow" in str]

                userinfo = {
                    "username": me.get("preferred_username"),
                    "email": me.get("email"),
                    "first_name": me.get("given_name"),
                    "last_name": me.get("family_name"),
                    "role_keys": groups,
                }
                log.info("user info: {0}".format(userinfo))
                return userinfo
            else:
                return {}


    SECURITY_MANAGER_CLASS = CustomSecurityManager
